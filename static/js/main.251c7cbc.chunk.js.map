{"version":3,"sources":["Components/Navbar.jsx","Components/Sidebar.jsx","Components/Main.jsx","Components/App.jsx","serviceWorker.js","index.js"],"names":["Navbar","id","Sidebar","className","title","author","selected","map","book","index","isSelected","key","onClick","console","log","MainHeader","MainSummary","MainOutline","MainSection","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAWeA,G,UATA,kBACb,yBAAKC,GAAG,UACN,4BACE,oCACA,uCACA,yCC2CSC,EAhDC,WA2Bd,OACE,2BAAOD,GAAG,UAAUE,UAAU,MAC5B,4BAAQA,UAAU,aAChB,0BAAMA,UAAU,YAAhB,UAEF,wBAAIA,UAAU,WA/BJ,CACZ,CACEC,MAAO,gBACPC,OAAQ,gBACRC,UAAU,GAEZ,CACEF,MAAO,sBACPC,OAAQ,mBACRC,UAAU,GAEZ,CACEF,MAAO,gBACPC,OAAQ,cACRC,UAAU,IAkBDC,KAAI,SAACC,EAAMC,GAAP,OACT,wBACEN,WAhBeO,EAgBaF,EAAKF,SAfrCI,EACK,sCAEA,gBAaDC,IAAKF,EACLG,QAAS,kBAAMC,QAAQC,IAAI,aAE3B,0BAAMX,UAAU,uBAAuBK,EAAKJ,OAC5C,0BAAMD,UAAU,wBAAwBK,EAAKH,SArB9B,IAAAK,QCnBrBK,EAAa,kBACjB,4BAAQZ,UAAU,YAChB,wBAAIA,UAAU,mBAAd,iBACA,0BAAMA,UAAU,sBAAhB,mBAIEa,EAAc,kBAClB,6BAASb,UAAU,aACjB,uBAAGA,UAAU,mBAAb,+KAQEc,EAAc,kBAClB,6BAASd,UAAU,aACjB,wBAAIA,UAAU,oBAAd,sCACA,wBAAIA,UAAU,mBACZ,wBAAIA,UAAU,wBACZ,8CAEF,wBAAIA,UAAU,wBACZ,qDAEF,wBAAIA,UAAU,wBACZ,mDAEF,wBAAIA,UAAU,wBACZ,4CAEF,wBAAIA,UAAU,wBACZ,iDAMFe,EAAc,kBAClB,6BAASf,UAAU,aACjB,gCACE,+CAEF,qCACA,sLAKA,oCACA,qDACA,wPAwFWgB,EAfF,kBACX,0BAAMlB,GAAG,OAAOE,UAAU,KACxB,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,6BAEA,kBAAC,EAAD,MAEA,6BAEA,kBAAC,EAAD,QC3HWiB,EAVH,kBACV,yBAAKnB,GAAG,OACN,kBAAC,EAAD,MACA,yBAAKE,UAAU,UACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.251c7cbc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = () => (\n  <nav id=\"navbar\">\n    <ul>\n      <li>Home</li>\n      <li>Contact</li>\n      <li>About</li>\n    </ul>\n  </nav>\n);\nexport default Navbar;\n","import React from \"react\";\n\nconst Sidebar = () => {\n  const books = [\n    {\n      title: \"Can't Hurt Me\",\n      author: \"David Goggins\",\n      selected: true\n    },\n    {\n      title: \"Checklist Manifesto\",\n      author: \"Dr. Atul Gawande\",\n      selected: false\n    },\n    {\n      title: \"Atomic Habits\",\n      author: \"James Clear\",\n      selected: false\n    }\n  ];\n\n  const getListItemClass = isSelected => {\n    if (isSelected) {\n      return \"sb-list-item sb-list-item--selected\";\n    } else {\n      return \"sb-list-item\";\n    }\n  };\n\n  return (\n    <aside id=\"sidebar\" className=\"sb\">\n      <header className=\"sb-header\">\n        <span className=\"sb-title\">Books</span>\n      </header>\n      <ul className=\"sb-list\">\n        {books.map((book, index) => (\n          <li\n            className={getListItemClass(book.selected)}\n            key={index}\n            onClick={() => console.log(\"Clicked\")}\n          >\n            <span className=\"sb-list-item__title\">{book.title}</span>\n            <span className=\"sb-list-item__author\">{book.author}</span>\n          </li>\n        ))}\n      </ul>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\n\nconst MainHeader = () => (\n  <header className=\"m-header\">\n    <h1 className=\"m-header__title\">Can't Hurt Me</h1>\n    <span className=\"m-header__subtitle\">David Goggins</span>\n  </header>\n);\n\nconst MainSummary = () => (\n  <section className=\"m-summary\">\n    <p className=\"m-summary__desc\">\n      This is a book about courage, mental toughness and resilience. There is a\n      personal challenge that reflects the lessons that were learnt from the\n      stories in each chapter.\n    </p>\n  </section>\n);\n\nconst MainOutline = () => (\n  <section className=\"m-outline\">\n    <h2 className=\"m-outline__title\">Key Takeaways and Actionable Ideas</h2>\n    <ul className=\"m-outline__list\">\n      <li className=\"m-outline__list-item\">\n        <p>Your Bad Cards</p>\n      </li>\n      <li className=\"m-outline__list-item\">\n        <p>Accountability Mirror</p>\n      </li>\n      <li className=\"m-outline__list-item\">\n        <p>The Impossible Task</p>\n      </li>\n      <li className=\"m-outline__list-item\">\n        <p>The 40% Rule</p>\n      </li>\n      <li className=\"m-outline__list-item\">\n        <p>The Cookie Jar</p>\n      </li>\n    </ul>\n  </section>\n);\n\nconst MainSection = () => (\n  <article className=\"m-section\">\n    <header>\n      <h2>Your Bad Cards</h2>\n    </header>\n    <em>What?</em>\n    <p>\n      You have been dealt with circumstances that were both unfavourable and\n      unwanted throughout your life. These are the bad cards that you were dealt\n      with.\n    </p>\n    <em>How?</em>\n    <p>Take a sheet of paper.</p>\n    <p>\n      Write down your bad cards: things that you hold resentment for,\n      circumstances you thought were unfair, the trauma & injustices you've\n      faced, failures and blame that were imposed on you, unlucky events and\n      accidents.\n    </p>\n  </article>\n);\n\nconst Forms = () => (\n  <div id=\"forms\">\n    <br />\n    <form>\n      <label>Enter your name:</label>\n      <br />\n      <input type=\"text\" required={true} />\n      <br />\n      <br />\n\n      <label>Enter your password:</label>\n      <br />\n      <input type=\"password\" required={true} />\n      <br />\n      <br />\n\n      <input type=\"checkbox\" />\n      <label>Do you want to sign up to the newsletter?</label>\n\n      <br />\n      <hr />\n\n      <label>Choose your adventure?</label>\n      <br />\n      <input type=\"radio\" name=\"adventure\" value=\"warrior\" />\n      <label>Warrior</label>\n      <br />\n      <input type=\"radio\" name=\"adventure\" value=\"mage\" />\n      <label>Mage</label>\n      <br />\n      <input type=\"radio\" name=\"adventure\" value=\"thief\" />\n      <label>Thief</label>\n      <br />\n      <input type=\"radio\" name=\"adventure\" value=\"archer\" />\n      <label>Archer</label>\n      <br />\n      <br />\n\n      <label>Choose a color:</label>\n      <input type=\"color\" />\n      <br />\n      <br />\n\n      <label>Enter your email:</label>\n      <input type=\"email\" required={true} />\n      <br />\n      <br />\n\n      <label>Pick a number:</label>\n      <input type=\"number\" />\n      <br />\n      <br />\n\n      <label>Search using a keyword:</label>\n      <input type=\"search\" />\n\n      <br />\n      <br />\n\n      <input type=\"submit\" />\n    </form>\n  </div>\n);\n\nconst Main = () => (\n  <main id=\"main\" className=\"m\">\n    <MainHeader />\n    <MainSummary />\n\n    <br />\n\n    <MainOutline />\n\n    <br />\n\n    <MainSection />\n    {/* <Forms /> */}\n  </main>\n);\nexport default Main;\n","import React from \"react\";\nimport \"../App.scss\";\nimport Navbar from \"./Navbar\";\nimport Sidebar from \"./Sidebar\";\nimport Main from \"./Main\";\n\nconst App = () => (\n  <div id=\"app\">\n    <Navbar />\n    <div className=\"window\">\n      <Sidebar />\n      <Main />\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}